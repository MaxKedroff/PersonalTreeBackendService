// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(UserDb))]
    [Migration("20251023155859_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Property<Guid>("User_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AdGuid")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Contacts")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<DateTime>("Created_at")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("Is_admin")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastAdSync")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ManagerUser_id")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("Manager_id")
                        .HasColumnType("uuid");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SamAccountName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Updated_at")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("User_id");

                    b.HasIndex("ManagerUser_id");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.HasOne("Domain.Entities.User", "Manager")
                        .WithMany("Subordinates")
                        .HasForeignKey("ManagerUser_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Domain.Entities.ContactInfo", "ContactInfo", b1 =>
                        {
                            b1.Property<Guid>("User_id")
                                .HasColumnType("uuid");

                            b1.Property<string>("Avatar")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("avatar");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("city");

                            b1.Property<string>("New_avatar")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("new_avatar");

                            b1.Property<string>("Phone")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("phone");

                            b1.HasKey("User_id");

                            b1.ToTable("users");

                            b1.WithOwner()
                                .HasForeignKey("User_id");
                        });

                    b.OwnsOne("Domain.Entities.PersonalInfo", "PersonalInfo", b1 =>
                        {
                            b1.Property<Guid>("User_id")
                                .HasColumnType("uuid");

                            b1.Property<DateTime>("Birth_date")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("birth_date");

                            b1.Property<string>("First_name")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("first_name");

                            b1.Property<string>("Interests")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("interests");

                            b1.Property<string>("Last_name")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("last_name");

                            b1.Property<string>("Patronymic")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("patronymic");

                            b1.HasKey("User_id");

                            b1.ToTable("users");

                            b1.WithOwner()
                                .HasForeignKey("User_id");
                        });

                    b.OwnsOne("Domain.Entities.WorkInfo", "WorkInfo", b1 =>
                        {
                            b1.Property<Guid>("User_id")
                                .HasColumnType("uuid");

                            b1.Property<string>("Department")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("department");

                            b1.Property<string>("Position")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("position");

                            b1.Property<DateTime>("Work_exp")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("work_exp");

                            b1.HasKey("User_id");

                            b1.ToTable("users");

                            b1.WithOwner()
                                .HasForeignKey("User_id");
                        });

                    b.Navigation("ContactInfo")
                        .IsRequired();

                    b.Navigation("Manager");

                    b.Navigation("PersonalInfo")
                        .IsRequired();

                    b.Navigation("WorkInfo")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Navigation("Subordinates");
                });
#pragma warning restore 612, 618
        }
    }
}
